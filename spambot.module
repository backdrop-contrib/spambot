<?php
// $Id$ 
/**
 *  Implementation of hook_menu().
 */
function spambot_menu() {
  $items = array();

  $items['admin/settings/spambot'] = array(
    'title' => 'Spambot configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spambot_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

function spambot_admin_form() {
  $form = array();
  $form['spambot_sfs_api_key'] = array(
    '#type'          => 'textfield',
    '#title'         => t("SFS API key"),
    '#default_value' => variable_get('spambot_sfs_api_key', ''),
    '#description' => t('To report spammers to SFS you need to register for '
      . 'an API key at the <a href="@sfs">Stop Forum Spam web site</a>.', array('@sfs'=>url("http://www.stopforumspam.com/signup"))),
  );
  return system_settings_form($form);
}

/**
* Implementation of hook_form_alter().
*/

function spambot_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register' || $form_id == 'user_edit') {
//     drupal_set_message("<pre>" . print_r($form['#validate'], TRUE). "</pre>");
//     $form['#validate'] = array('spambot_username_validate');
    array_push($form['#validate'], 'spambot_username_validate');
  }
}
/**
 * Validation function
 *
 * @param mixed $element Posted form structure
 */
function spambot_username_validate ($element) {
// exipioauro@gmail.com
  $mail = urlencode($element['#post']['mail']);
  $name = urlencode($element['#post']['name']);
  if ($mail && _spambot_request_boolean('http://www.stopforumspam.com/api?email=' . $mail)) {
    $block = true;
    watchdog("spambot", t("blocked spambot: @mail", array("@mail"=>$mail)));
  } else if ($name && _spambot_request_boolean('http://www.stopforumspam.com/api?username=' . $name)) {
    $block = true;
    watchdog("spambot", t("blocked spambot: @name", array("@name"=>$name)));
  }
  if ($block) {
    form_set_error('name', t("Blacklisted. Now go away!"));
    form_set_error('mail', t("Blacklisted. Now go away!"));
  }
}
/**
* Implementation of hook_user_operations().
*/
function spambot_user_operations(){
  $operations = array(
    'spambot_report' => array(
      'label' => t('block and report the selected users as spammers'),
      'callback' => 'spambot_user_operations_report',
    )
   );
   return $operations;
}
/**
* Implementation of hook_user().
*/
// function spambot_user($op, &$edit, &$account, $category = NULL) {
//   global $user;
//   if ($op != "insert") {
//     return;
//   }
//   if ($user->uid == 0) { // only save the registration ip if created via create new account 
//     $edit['registration_user_ip'] = ip_address();
//   }
// //   drupal_set_message("<pre>" . print_r($edit, TRUE). "</pre>");
// }

function spambot_user_operations_report($accounts) {
  foreach ($accounts as $uid) {
    $account = user_load(array('uid' => (int)$uid));
    // Skip blocking user if they are already blocked.
    if ($account !== FALSE && $account->status == 1) {
      user_save($account, array('status' => 0));
    }
    spambot_user_report($account);
  }
}
function spambot_user_report($account, $comments=NULL) {
  global $user;
  if (variable_get("spambot_sfs_api_key","") == "") {
    drupal_set_message(t('To report spammers to SFS you need to register for '
      . 'an API key at the <a href="@sfs">Stop Forum Spam web site</a> and enter it '
      . 'into the <a href="@cfg">Spambot configuration</a>.', array('@sfs'=>url("http://www.stopforumspam.com/signup"), '@cfg'=>url('admin/settings/spambot'))),
      'warning');
    return;
  }
//   drupal_set_message("<pre>" . print_r($account, TRUE). "</pre>");
  if (!$comments) { // get the latest comment for the user
    if (variable_get("spambot_report_all_ips", true) == true) {
      $comments = db_query('SELECT * FROM {comments} WHERE uid = %d', $account->uid);
    } else {
      $comments = db_query('SELECT * FROM {comments} WHERE uid = %d ORDER BY timestamp DESC LIMIT 1', $account->uid);
    }
  }
  
  $reported_ips = array();
  while ($comment = db_fetch_object($comments)) {
    if (in_array($comment->hostname, $reported_ips)) {
      continue;
    }
    $res = _spambot_request('http://www.stopforumspam.com/post.php?'
      .'email=' . urlencode($account->mail) . '?'
      .'username=' . urlencode($account->name) . '?'
      .'ip_addr=' . urlencode($comment->hostname) . '?'
      .'api_key=' . urlencode(variable_get("spambot_sfs_api_key","")),
      array("CURLOPT_POST" => true)
    );
    drupal_set_message("<pre>" . htmlentities(print_r($res, TRUE)). "</pre>");
    if ($res->status == 200) {
      drupal_set_message(t("reported @mail, @name, @ip", array("@mail" => $account->mail,
        "@name" => $account->name, "@ip" => $comment->hostname)));
      watchdog("spambot", t("reported @mail, @name, @ip by " . theme('username', $user), 
      array("@mail" => $account->mail, "@name" => $account->name, "@ip" => $comment->hostname)));
    } else {
      drupal_set_message(t("failed to report @mail, @name, @ip. This was ther error returned (@status): @out",
        array("@mail" => $account->mail, "@name" => $account->name, "@ip" => $comment->hostname,
        "@status" => $res->status, "@out" => $res->output)), 'warning');
      watchdog("spambot", t("failed to report @mail, @name, @ip. This was ther error returned (@status): @out",
        array("@mail" => $account->mail, "@name" => $account->name, "@ip" => $comment->hostname,
        "@status" => $res->status, "@out" => $res->output)));
    }
  }
}
function _spambot_request_boolean($url) {
  $request = _spambot_request($url);
  if ($request->output === FALSE) {
    return false;
  }
  $xml = new SimpleXMLElement($request->output);
//   drupal_set_message("<pre>" . htmlentities(print_r($xml, TRUE)). "</pre>");
  if($xml->appears == 'yes'){
    return true;
  }
  return false;
}
function _spambot_request($url, $curl_options=NULL) {
  // create curl resource
  $ch = curl_init();

  // set url
  curl_setopt($ch, CURLOPT_URL, $url);

  //return the transfer as a string
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  if (is_array($curl_options) ){
    curl_setopt_array($ch, $curl_options);
  }
  // $output contains the output string
  $output = curl_exec($ch);
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $length = curl_getinfo($ch, CURLINFO_CONTENT_LENGTH_DOWNLOAD);
  $response = new StdClass;
  $response->output = $output;
  $response->status = $httpcode;
  $response->length = $length;
  if ($output === FALSE) {
    $error = curl_error($ch);
    curl_close($ch);     
    watchdog("spambot", t("curl returned error: @error, request: @request",
      array("@error"=>$error, "@request"=>$url)));
    return $response;
  }
  curl_close($ch);     
  return $response;
}